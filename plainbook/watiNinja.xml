<!DOCTYPE chapter SYSTEM "../resources/plainbook/plainbook.dtd" >
<chapter title="Automating with .Net and WatiN" id="chp_watiNinja">
	<p>
		In this chapter we will put into practice some of the principles from <link ref="chp_three_layers" />. To recap,
		our aim is to automate the testing of a feature in a way that is flexible enough to allow for future
		changes. We will divide our test code into three layers in order to achieve this. These layers will have the following 
		aims and responsibilities:
	</p>
	<ul>
		<li>The Business Rules will be expressed in a Cucumber feature file. The feature file will be supported by a step definition class 
			written in C# that will use the API defined in the Workflow layer.
		</li>
		<li>
			The Site Workflow will be encapsulated in a fluent API composed of C# classes. This API will attempt to provide a DSL which 
			describes how users navigate through the site to achieve goals that are of interest for the feature(s) described in the Business Rules. 
			It will depend on the Technical Implementation API to provide the means of communicating with the application being tested.
		</li>
		<li>The Technical Implementation API will provide a finely grained set of classes which will hide the details of UI Automation. It will aim to
			promote reuse and to insulate the Workflow layer from UI changes</li>
	</ul>
	<section title="Getting Ready" id="sec_watiNinja_kickoff">
		<p>
			Before we start, we need to set up the project and get the WatiN libraries.
		</p>
		<section title="WatiN" id="sec_watiNinja_watin">
			<p>
				WatiN (pronounced What-in) is a library for Web Application Testing in .Net (the initials form the name). It was inspired by WatiR (pronounced water, 
				where the R stands for Ruby). There is more information about WatiN on SourceForge.<footnote><url link="http://watin.sourceforge.net/"/></footnote>
			</p>
			<p>
				Download the files from SourceForge<footnote><url link="http://sourceforge.net/projects/watin/files/"/></footnote>. For the example in this chapter, I used the 
				2.x / 2.0 Release candidate.<footnote><url link="http://sourceforge.net/projects/watin/files/WatiN%202.x/2.0%20Release%20candidates/"/></footnote>
				
			</p>
			<p>
				The files should come in zip format, so you will need to unzip them to a suitable directory. Inside the root directory you should find a directory called <code>Bin</code>. Inside this directory, there should be a file called <code>WatiN.Core.dll</code>. This will need to be referenced in the project we create.
			</p>
		</section>
		<section title="Creating a Project" id="sec_watiNinja_watin">
			<p>
				Create a new project, using the same methods described in <link ref="chp_hello_dotnet"/> (excepting the creation of feature files and step definition classes). Once this is done, there are a couple of extra steps required so we can use WatiN.
			</p>
			<p>
				<ol>
					<li>Add a reference to <code>WatiN.Core.dll</code></li>
					<li>Because our example uses Internet Explorer (which is not thread safe!<footnote><url link="http://watin.sourceforge.net/apartmentstateinfo.html"></url></footnote>), you will need to run the tests as Single Threaded Apartments. The details of how to configure this are in 
						<link ref="sb-watininja-stp" />.
					</li>
				</ol>
				
				
			</p>
			<sidebar title="Configuring apartment threading" id="sb-watininja-stp">
				<p>
					Add an <code>App.config</code> file to the root of the project. Edit it, adding the lines
				</p>
				<code file="dotnet/WebNinja/WatiNinja/App.config" part="apartment"/>
			</sidebar>
		</section>
		<section title="Making sure WatiN is working" id="sec_watiNinja_smoketest">
			<p>
				Before adding any feature files, it would be useful to check that WatiN is configured correctly. To achieve this, let's add a simple NUnit test.
				<footnote>I've used the one in the WatiN getting started guide <url link="http://watin.sourceforge.net/gettingstarted.html"/> for this example</footnote> 
			</p>
			<p>
				First, create a folder in your project called <code>test</code>. Then add a class file in the new folder called <code>SmokeTest.cs</code>. Edit 
				the class so it looks like the example below. Once you have done that, run the test using NUnit.
			</p>
			<code file="dotnet/WebNinja/WatiNinja/test/SmokeTest.cs"/>	
		</section>
		<section title="CodeTrack" id="sec_watiNinja_smoketest">
			<p>In our example project, we will be using an open source bug tracking tool called CodeTrack<footnote><url link="http://kennwhite.sourceforge.net/codetrack/"/></footnote> as a system to test.</p>
			<p>Codetrack requires Apache and PHP, so you will need to install both of these if they are not on your system</p>
			<sidebar title="Installing Apache" id="sb-watininja-apache">
				<p>
					To install apache on windows, download the msi installer from the apache site.<footnote><url link="http://httpd.apache.org/download.cgi"/></footnote>
				</p>
			</sidebar>
			<sidebar title="Installing PHP" id="sb-watininja-apache">
				<p>
					To install PHP on windows, download the msi installed from the PHP site.<footnote><url link="http://windows.php.net/download/"/></footnote> Install PHP as
					an apache module. You may need to alter the apache configuration file so it correctly points at the php-apache library. To do this edit the
					<code>httpd.conf</code> file in the <code>conf</code> directory where you installed Apache (on my 64 windows system this was 
					<code>C:\Program Files (x86)\Apache Software Foundation\Apache2.2\conf</code>). There should be some lines at the bottom of this file 
				</p>
		<code>
#BEGIN PHP INSTALLER EDITS - REMOVE ONLY ON UNINSTALL
PHPIniDir "C:/Program Files (x86)/PHP"
LoadModule php5_module "C:/Program Files (x86)/PHP/
php5apache2_2.dll"
#END PHP INSTALLER EDITS - REMOVE ONLY ON UNINSTALL
		</code>
				<p>When I installed they were blank and needed to be edited so that the correct path to <code>php5apache2_2.dll</code>was set.</p>
			</sidebar>
			<p>Once these prerequisites are in place, download the zip or tarball from the codetrack site, and extract into the httpd docs directory.<footnote>For example: <code>C:\Program Files (x86)\Apache Software Foundation\Apache2.2\htdocs</code></footnote> After restarting Apache, pointing your browser at <code>http://localhost/codetrack</code> should bring up the codetrack login screen.
			</p>
			<p>
				The final step is to create some logins for the test to use.
				<ol>
					<li>Login as admin (password codetrack) and enter a new password</li>
					<li>Select the Admin button at the top of the screen, select the &lsquo;Add a User&rsquo; link, and create an administrative user for the tests to use as illustrated in <link ref="img.codetrack-cukeadmin"/></li>.
					<li>Repeat the procedure for users &lsquo;Ninja 1&rsquo; and &lsquo;Ninja 2&rsquo; as illustrated in <link ref="img.codetrack-ninja1"/> 
						and <link ref="img.codetrack-ninja2"/>
					</li>
				</ol>
				<img src="codetrack-cukeadmin.png" id="img.codetrack-cukeadmin" title="Creating cukeadmin user in CodeTrack"/>
				<img src="codetrack-ninja1.png" id="img.codetrack-ninja1" title="Creating ninja1 user in CodeTrack"/>
				<img src="codetrack-ninja2.png" id="img.codetrack-ninja2" title="Creating ninja2 user in CodeTrack"/>
			</p>
			
		</section>
	</section>
	<section title="Putting it to the test">
		<section title="Creating the Feature file" id="sec_watiNinja_overview">
			<p>
				Now we have a system to test, we can get on with the main order of business. We will begin by creating a cucumber feature file, and then work down
				through the step definitions, application workflow and finally the technical layer. In this chapter we will cover the key classes in the project,
				there is a completed version of the project that you can download from the cuke4ninja site.<footnote><url link="http://cuke4ninja.com/download.html"/></footnote> 
			</p>
			<p>
				If you haven't created a <code>features</code> folder in the project yet, do this now.<footnote>Don't forget the step_definitions folder and cucumber.wire file as well!</footnote> Add a new file to the <code>features</code> folder called <code>reportassigned.feature</code>. Edit it so it looks like the following example.
			</p>
			<code file="dotnet/WebNinja/WatiNinja/features/reportassigned.feature"/>	
			<p>
				So, we want a user to be able to log in and see the issues assigned to them. Though this seems simple enough on first inspection, there are a number of complicating factors.
			</p>
		</section>
	</section>
</chapter>
