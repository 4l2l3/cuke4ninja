<!DOCTYPE chapter SYSTEM "../resources/plainbook/plainbook.dtd" >
<chapter title="Automating with .Net and WatiN" id="chp_watiNinja">
	<p>
		In this chapter we will put into practice some of the principles from <link ref="chp_three_layers" />. To recap,
		our aim is to automate the testing of a feature in a way that is flexible enough to allow for future
		changes. We will divide our test code into three layers in order to achieve this. These layers will have the following 
		aims and responsibilities:
	</p>
	<ul>
		<li>The Business Rules will be expressed in a Cucumber feature file. The feature file will be supported by a step definition class 
			written in C# that will use the API defined in the Workflow layer.
		</li>
		<li>
			The Site Workflow will be encapsulated in a fluent API composed of C# classes. This API will attempt to provide a DSL which 
			describes how users navigate through the site to achieve goals that are of interest for the feature(s) described in the Business Rules. 
			It will depend on the Technical Implementation API to provide the means of communicating with the application being tested.
		</li>
		<li>The Technical Implementation API will provide a finely grained set of classes which will hide the details of UI Automation. It will aim to
			promote reuse and to insulate the Workflow layer from UI changes</li>
	</ul>
	<section title="Getting Ready" id="sec_watiNinja_kickoff">
		<p>
			Before we start, we need to set up the project and get the WatiN libraries.
		</p>
		<section title="WatiN" id="sec_watiNinja_watin">
			<p>
				WatiN (pronounced What-in) is a library for Web Application Testing in .Net (the initials form the name). It was inspired by WatiR (pronounced water, 
				where the R stands for Ruby). There is more information about WatiN on SourceForge.<footnote><url link="http://watin.sourceforge.net/"/></footnote>
			</p>
			<p>
				Download the files from SourceForge<footnote><url link="http://sourceforge.net/projects/watin/files/"/></footnote>. For the example in this chapter, I used the 
				2.x / 2.0 Release candidate.<footnote><url link="http://sourceforge.net/projects/watin/files/WatiN%202.x/2.0%20Release%20candidates/"/></footnote>
				
			</p>
			<p>
				The files should come in zip format, so you will need to unzip them to a suitable directory. Inside the root directory you should find a directory called <code>Bin</code>. Inside this directory, there should be a file called <code>WatiN.Core.dll</code>. This will need to be referenced in the project we create.
			</p>
		</section>
		<section title="Creating a Project" id="sec_watiNinja_watin">
			<p>
				Create a new project, using the same methods described in <link ref="chp_hello_dotnet"/> (excepting the creation of feature files and step definition classes). Once this is done, there are a couple of extra steps required so we can use WatiN.
			</p>
			<p>
				<ol>
					<li>Add a reference to <code>WatiN.Core.dll</code></li>
					<li>Because our example uses Internet Explorer (which is not thread safe!<footnote><url link="http://watin.sourceforge.net/apartmentstateinfo.html"></url></footnote>), you will need to run the tests as Single Threaded Apartments. The details of how to configure this are in 
						<link ref="sb-watininja-stp" />.
					</li>
				</ol>
				
				
			</p>
			<sidebar title="Configuring apartment threading" id="sb-watininja-stp">
				<p>
					Add an <code>App.config</code> file to the root of the project. Edit it, adding the lines
				</p>
				<code file="dotnet/WebNinja/WatiNinja/App.config" part="apartment"/>
			</sidebar>
		</section>
		<section title="Making sure WatiN is working" id="sec_watiNinja_smoketest">
			<p></p>
		</section>
	</section>
</chapter>
